// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mattermost/mattermost-plugin-confluence/server/service (interfaces: SubscriptionRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	serializer "github.com/mattermost/mattermost-plugin-confluence/server/serializer"
)

// MockSubscriptionRepository is a mock of SubscriptionRepository interface.
type MockSubscriptionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionRepositoryMockRecorder
}

// MockSubscriptionRepositoryMockRecorder is the mock recorder for MockSubscriptionRepository.
type MockSubscriptionRepositoryMockRecorder struct {
	mock *MockSubscriptionRepository
}

// NewMockSubscriptionRepository creates a new mock instance.
func NewMockSubscriptionRepository(ctrl *gomock.Controller) *MockSubscriptionRepository {
	mock := &MockSubscriptionRepository{ctrl: ctrl}
	mock.recorder = &MockSubscriptionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriptionRepository) EXPECT() *MockSubscriptionRepositoryMockRecorder {
	return m.recorder
}

// GetSubscriptions mocks base method.
func (m *MockSubscriptionRepository) GetSubscriptions() (serializer.Subscriptions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptions")
	ret0, _ := ret[0].(serializer.Subscriptions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptions indicates an expected call of GetSubscriptions.
func (mr *MockSubscriptionRepositoryMockRecorder) GetSubscriptions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptions", reflect.TypeOf((*MockSubscriptionRepository)(nil).GetSubscriptions))
}

// GetSubscriptionsByURLPageID mocks base method.
func (m *MockSubscriptionRepository) GetSubscriptionsByURLPageID(arg0, arg1 string) (serializer.StringArrayMap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionsByURLPageID", arg0, arg1)
	ret0, _ := ret[0].(serializer.StringArrayMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionsByURLPageID indicates an expected call of GetSubscriptionsByURLPageID.
func (mr *MockSubscriptionRepositoryMockRecorder) GetSubscriptionsByURLPageID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionsByURLPageID", reflect.TypeOf((*MockSubscriptionRepository)(nil).GetSubscriptionsByURLPageID), arg0, arg1)
}

// GetSubscriptionsByURLSpaceKey mocks base method.
func (m *MockSubscriptionRepository) GetSubscriptionsByURLSpaceKey(arg0, arg1 string) (serializer.StringArrayMap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionsByURLSpaceKey", arg0, arg1)
	ret0, _ := ret[0].(serializer.StringArrayMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionsByURLSpaceKey indicates an expected call of GetSubscriptionsByURLSpaceKey.
func (mr *MockSubscriptionRepositoryMockRecorder) GetSubscriptionsByURLSpaceKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionsByURLSpaceKey", reflect.TypeOf((*MockSubscriptionRepository)(nil).GetSubscriptionsByURLSpaceKey), arg0, arg1)
}
